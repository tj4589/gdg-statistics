project
â”‚
â”œâ”€â”€ frontend
â”‚   â”œâ”€â”€ index.html              # Public page with member registration form + admin login button
â”‚   â”œâ”€â”€ admin-login.html        # Admin password login page
â”‚   â”œâ”€â”€ admin-dashboard.html    # Admin dashboard (charts, pictograms, data table)
â”‚   â”‚
â”‚   â”œâ”€â”€ js
â”‚   â”‚   â”œâ”€â”€ form.js             # Handles member registration form submission & local storage
â”‚   â”‚   â”œâ”€â”€ admin-login.js      # Handles admin login authentication logic
â”‚   â”‚   â”œâ”€â”€ admin-dashboard.js  # Loads member data, renders charts, pictograms, and stats
â”‚   â”‚   â”œâ”€â”€ chart-config.js     # Optional handles Chart.js setup (clean separation)
â”‚   â”‚   â””â”€â”€ utils.js            # Reusable helper functions (e.g. getMembers, saveMembers)
â”‚   â”‚
â”‚   â”œâ”€â”€ css
â”‚   â”‚   â”œâ”€â”€ style.css           # General styles (layout, typography, colors)
â”‚   â”‚   â”œâ”€â”€ form.css            # Styles for registration form
â”‚   â”‚   â”œâ”€â”€ admin.css           # Dashboard layout & chartpictogram styling
â”‚   â”‚   â””â”€â”€ responsive.css      # Optional responsive design rules
â”‚   â”‚
â”‚   â””â”€â”€ assets
â”‚       â”œâ”€â”€ logo.png
â”‚       â”œâ”€â”€ icons
â”‚       â”‚   â”œâ”€â”€ member.svg
â”‚       â”‚   â”œâ”€â”€ admin.svg
â”‚       â”‚   â””â”€â”€ chart.svg
â”‚       â””â”€â”€ fonts
â”‚
â””â”€â”€ backend
    â”œâ”€â”€ server.js               # Express.js or Flask main entry point
    â”‚
    â”œâ”€â”€ routes
    â”‚   â”œâ”€â”€ members.js          # Handle member registration, fetching, and updates
    â”‚   â”œâ”€â”€ admin.js            # Admin authentication & dashboard data APIs
    â”‚   â””â”€â”€ stats.js            # Provides statistics for charts (role distribution, totals)
    â”‚
    â”œâ”€â”€ controllers
    â”‚   â”œâ”€â”€ memberController.js # Logic for saving and retrieving member data
    â”‚   â”œâ”€â”€ adminController.js  # Logic for login validation & admin actions
    â”‚   â””â”€â”€ statsController.js  # Logic for computing and returning analytics
    â”‚
    â”œâ”€â”€ models
    â”‚   â””â”€â”€ memberModel.js      # Defines data structure for members (ORM or raw SQL)
    â”‚
    â”œâ”€â”€ database
    â”‚   â”œâ”€â”€ members.db          # SQLite or MongoDB collection
    â”‚   â””â”€â”€ schema.sql          # SQL schema (if using relational DB)
    â”‚
    â”œâ”€â”€ middleware
    â”‚   â”œâ”€â”€ authMiddleware.js   # Protects admin routes (token or session validation)
    â”‚   â””â”€â”€ logger.js           # Optional request logging
    â”‚
    â””â”€â”€ utils
        â”œâ”€â”€ db.js               # Database connection setup
        â””â”€â”€ helpers.js          # Reusable backend helper functions

Section	Purpose
/frontend/index.html	Where members register â€” public form.
/frontend/admin-login.html	Password-protected admin login page.
/frontend/admin-dashboard.html	Shows all members, charts (Chart.js), pictograms, and stats.
/frontend/js/form.js	Saves new members to localStorage or sends to backend.
/frontend/js/admin-dashboard.js	Pulls all members + creates charts, pictograms, and tables.
/backend/routes/*	Defines all API endpoints (/register, /login, /stats).
/backend/controllers/*	Handles business logic â€” clean separation from routes.
/backend/database/*	Stores your data locally (SQLite) or connects to a cloud DB.

ðŸ”¹ Suggested Development Flow

Frontend phase (prototype)

Use localStorage to store member data and simulate admin login.

Build form â†’ dashboard â†’ charts â†’ pictograms.

Backend phase (production)

Replace localStorage with API endpoints.

Connect to SQLite/MySQL/MongoDB.

Add real authentication (JWT or sessions).

Styling phase

Use style.css for global UI.

Use admin.css for dashboard grid layout and visuals.

Use form.css for clean input forms.
